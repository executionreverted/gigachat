// This file is autogenerated by the hyperdispatch compiler
/* eslint-disable camelcase */

const { c, b4a, assert } = require('hyperdispatch/runtime')
const { version, getEncoding, setVersion } = require('./messages.js')

const defaultVersion = version

class Router {
  constructor () {
    this._handler0 = null
    this._handler1 = null
    this._handler2 = null
    this._handler3 = null
    this._handler4 = null
    this._handler5 = null
    this._handler6 = null

    this._missing = 7
  }

  add (name, handler) {
    switch (name) {
      case '@gigauser/remove-writer':
        this._handler0 = handler
        break
      case '@gigauser/add-writer':
        this._handler1 = handler
        break
      case '@gigauser/add-invite':
        this._handler2 = handler
        break
      case '@gigauser/set-profile':
        this._handler3 = handler
        break
      case '@gigauser/update-rooms':
        this._handler4 = handler
        break
      case '@gigauser/update-devices':
        this._handler5 = handler
        break
      case '@gigauser/update-settings':
        this._handler6 = handler
        break
      default:
        throw new Error('Cannot register a handler for a nonexistent route: ' + name)
    }
    this._missing--
  }

  _checkAll () {
    assert(this._handler0 !== null, 'Missing handler for "@gigauser/remove-writer"')
    assert(this._handler1 !== null, 'Missing handler for "@gigauser/add-writer"')
    assert(this._handler2 !== null, 'Missing handler for "@gigauser/add-invite"')
    assert(this._handler3 !== null, 'Missing handler for "@gigauser/set-profile"')
    assert(this._handler4 !== null, 'Missing handler for "@gigauser/update-rooms"')
    assert(this._handler5 !== null, 'Missing handler for "@gigauser/update-devices"')
    assert(this._handler6 !== null, 'Missing handler for "@gigauser/update-settings"')
  }

  async dispatch (encoded, context) {
    if (this._missing > 0) {
      this._checkAll()
    }

    const state = { buffer: encoded, start: 0, end: encoded.byteLength }
    const id = c.uint.decode(state)

    setVersion(defaultVersion)

    switch (id) {
      case 0:
        return this._handler0(route0.enc.decode(state), context)
      case 1:
        return this._handler1(route1.enc.decode(state), context)
      case 2:
        return this._handler2(route2.enc.decode(state), context)
      case 3:
        return this._handler3(route3.enc.decode(state), context)
      case 4:
        return this._handler4(route4.enc.decode(state), context)
      case 5:
        return this._handler5(route5.enc.decode(state), context)
      case 6:
        return this._handler6(route6.enc.decode(state), context)
      default:
        throw new Error('Handler not found for ID:' + id)
    }
  }
}

function dispatch (name, message, { version = defaultVersion } = {}) {
  const state = { buffer: null, start: 0, end: 0 }

  const o = getEncoderAndId(name)
  setVersion(version)

  c.uint.preencode(state, o.id)
  o.enc.preencode(state, message)

  state.buffer = b4a.allocUnsafe(state.end)
  c.uint.encode(state, o.id)
  o.enc.encode(state, message)

  return state.buffer
}

const route0 = {
  id: 0,
  enc: getEncoding('@gigauser/writer')
}

const route1 = {
  id: 1,
  enc: getEncoding('@gigauser/writer')
}

const route2 = {
  id: 2,
  enc: getEncoding('@gigauser/invite')
}

const route3 = {
  id: 3,
  enc: getEncoding('@gigauser/profile')
}

const route4 = {
  id: 4,
  enc: getEncoding('@gigauser/rooms')
}

const route5 = {
  id: 5,
  enc: getEncoding('@gigauser/devices')
}

const route6 = {
  id: 6,
  enc: getEncoding('@gigauser/settings')
}

function getEncoderAndId (name) {
  switch (name) {
    case '@gigauser/remove-writer':
      return route0
    case '@gigauser/add-writer':
      return route1
    case '@gigauser/add-invite':
      return route2
    case '@gigauser/set-profile':
      return route3
    case '@gigauser/update-rooms':
      return route4
    case '@gigauser/update-devices':
      return route5
    case '@gigauser/update-settings':
      return route6
    default:
      throw new Error('Handler not found for name: ' + name)
  }
}

module.exports = {
  version,
  dispatch,
  Router
}
