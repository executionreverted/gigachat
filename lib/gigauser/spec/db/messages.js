// This file is autogenerated by the hyperschema compiler
// Schema Version: 1
/* eslint-disable camelcase */
/* eslint-disable quotes */

const VERSION = 1
const { c } = require('hyperschema/runtime')

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @gigauser/writer
const encoding0 = {
  preencode (state, m) {
    c.buffer.preencode(state, m.key)
  },
  encode (state, m) {
    c.buffer.encode(state, m.key)
  },
  decode (state) {
    const r0 = c.buffer.decode(state)

    return {
      key: r0
    }
  }
}

// @gigauser/invite
const encoding1 = {
  preencode (state, m) {
    c.buffer.preencode(state, m.id)
    c.buffer.preencode(state, m.invite)
    c.buffer.preencode(state, m.publicKey)
    c.int.preencode(state, m.expires)
  },
  encode (state, m) {
    c.buffer.encode(state, m.id)
    c.buffer.encode(state, m.invite)
    c.buffer.encode(state, m.publicKey)
    c.int.encode(state, m.expires)
  },
  decode (state) {
    const r0 = c.buffer.decode(state)
    const r1 = c.buffer.decode(state)
    const r2 = c.buffer.decode(state)
    const r3 = c.int.decode(state)

    return {
      id: r0,
      invite: r1,
      publicKey: r2,
      expires: r3
    }
  }
}

// @gigauser/profile
const encoding2 = {
  preencode (state, m) {
    c.string.preencode(state, m.key)
    c.string.preencode(state, m.value)
  },
  encode (state, m) {
    c.string.encode(state, m.key)
    c.string.encode(state, m.value)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)

    return {
      key: r0,
      value: r1
    }
  }
}

// @gigauser/rooms
const encoding3 = encoding2

// @gigauser/devices
const encoding4 = encoding2

// @gigauser/settings
const encoding5 = encoding2

// @gigauser/writer/hyperdb#0
const encoding6 = {
  preencode (state, m) {

  },
  encode (state, m) {

  },
  decode (state) {
    return {
      key: null
    }
  }
}

// @gigauser/invite/hyperdb#1
const encoding7 = {
  preencode (state, m) {
    c.buffer.preencode(state, m.invite)
    c.buffer.preencode(state, m.publicKey)
    c.int.preencode(state, m.expires)
  },
  encode (state, m) {
    c.buffer.encode(state, m.invite)
    c.buffer.encode(state, m.publicKey)
    c.int.encode(state, m.expires)
  },
  decode (state) {
    const r1 = c.buffer.decode(state)
    const r2 = c.buffer.decode(state)
    const r3 = c.int.decode(state)

    return {
      id: null,
      invite: r1,
      publicKey: r2,
      expires: r3
    }
  }
}

// @gigauser/profile/hyperdb#2
const encoding8 = {
  preencode (state, m) {
    c.string.preencode(state, m.value)
  },
  encode (state, m) {
    c.string.encode(state, m.value)
  },
  decode (state) {
    const r1 = c.string.decode(state)

    return {
      key: null,
      value: r1
    }
  }
}

// @gigauser/rooms/hyperdb#3
const encoding9 = encoding8

// @gigauser/devices/hyperdb#4
const encoding10 = encoding8

// @gigauser/settings/hyperdb#5
const encoding11 = encoding8

function setVersion (v) {
  version = v
}

function encode (name, value, v = VERSION) {
  version = v
  return c.encode(getEncoding(name), value)
}

function decode (name, buffer, v = VERSION) {
  version = v
  return c.decode(getEncoding(name), buffer)
}

function getEnum (name) {
  switch (name) {
    default: throw new Error('Enum not found ' + name)
  }
}

function getEncoding (name) {
  switch (name) {
    case '@gigauser/writer': return encoding0
    case '@gigauser/invite': return encoding1
    case '@gigauser/profile': return encoding2
    case '@gigauser/rooms': return encoding3
    case '@gigauser/devices': return encoding4
    case '@gigauser/settings': return encoding5
    case '@gigauser/writer/hyperdb#0': return encoding6
    case '@gigauser/invite/hyperdb#1': return encoding7
    case '@gigauser/profile/hyperdb#2': return encoding8
    case '@gigauser/rooms/hyperdb#3': return encoding9
    case '@gigauser/devices/hyperdb#4': return encoding10
    case '@gigauser/settings/hyperdb#5': return encoding11
    default: throw new Error('Encoder not found ' + name)
  }
}

function getStruct (name, v = VERSION) {
  const enc = getEncoding(name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

const resolveStruct = getStruct // compat

module.exports = { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }
