// This file is autogenerated by the hyperschema compiler
// Schema Version: 1
/* eslint-disable camelcase */
/* eslint-disable quotes */

const VERSION = 1
const { c } = require('hyperschema/runtime')

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @gigaroom/writer
const encoding0 = {
  preencode (state, m) {
    c.buffer.preencode(state, m.key)
  },
  encode (state, m) {
    c.buffer.encode(state, m.key)
  },
  decode (state) {
    const r0 = c.buffer.decode(state)

    return {
      key: r0
    }
  }
}

// @gigaroom/invite
const encoding1 = {
  preencode (state, m) {
    c.buffer.preencode(state, m.id)
    c.buffer.preencode(state, m.invite)
    c.buffer.preencode(state, m.publicKey)
    c.int.preencode(state, m.expires)
    state.end++ // max flag is 8 so always one byte

    if (m.roomId) c.string.preencode(state, m.roomId)
    if (m.maxUses) c.int.preencode(state, m.maxUses)
    if (m.useCount) c.int.preencode(state, m.useCount)
  },
  encode (state, m) {
    const flags =
      (m.roomId ? 1 : 0) |
      (m.maxUses ? 2 : 0) |
      (m.useCount ? 4 : 0) |
      (m.isRevoked ? 8 : 0)

    c.buffer.encode(state, m.id)
    c.buffer.encode(state, m.invite)
    c.buffer.encode(state, m.publicKey)
    c.int.encode(state, m.expires)
    c.uint.encode(state, flags)

    if (m.roomId) c.string.encode(state, m.roomId)
    if (m.maxUses) c.int.encode(state, m.maxUses)
    if (m.useCount) c.int.encode(state, m.useCount)
  },
  decode (state) {
    const r0 = c.buffer.decode(state)
    const r1 = c.buffer.decode(state)
    const r2 = c.buffer.decode(state)
    const r3 = c.int.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      invite: r1,
      publicKey: r2,
      expires: r3,
      roomId: (flags & 1) !== 0 ? c.string.decode(state) : null,
      maxUses: (flags & 2) !== 0 ? c.int.decode(state) : 0,
      useCount: (flags & 4) !== 0 ? c.int.decode(state) : 0,
      isRevoked: (flags & 8) !== 0
    }
  }
}

// @gigaroom/message
const encoding2 = {
  preencode (state, m) {
    const flags =
      (m.channelId ? 1 : 0) |
      (m.senderName ? 2 : 0) |
      (m.status ? 4 : 0) |
      (m.edited ? 8 : 0) |
      (m.editedAt ? 16 : 0) |
      (m.replyToId ? 32 : 0) |
      (m.threadRootId ? 64 : 0) |
      (m.forwardedFromId ? 128 : 0) |
      (m.deleted ? 256 : 0) |
      (m.deletedBy ? 512 : 0) |
      (m.deletedAt ? 1024 : 0) |
      (m.searchableText ? 2048 : 0)

    c.string.preencode(state, m.id)
    c.string.preencode(state, m.roomId)
    c.uint.preencode(state, flags)

    if (m.channelId) c.string.preencode(state, m.channelId)
    c.string.preencode(state, m.type)
    c.buffer.preencode(state, m.sender)
    if (m.senderName) c.string.preencode(state, m.senderName)
    c.string.preencode(state, m.content)
    c.int.preencode(state, m.timestamp)
    c.buffer.preencode(state, m.signature)
    if (m.status) c.string.preencode(state, m.status)
    if (m.editedAt) c.int.preencode(state, m.editedAt)
    if (m.replyToId) c.string.preencode(state, m.replyToId)
    if (m.threadRootId) c.string.preencode(state, m.threadRootId)
    if (m.forwardedFromId) c.string.preencode(state, m.forwardedFromId)
    if (m.deletedBy) c.buffer.preencode(state, m.deletedBy)
    if (m.deletedAt) c.int.preencode(state, m.deletedAt)
    if (m.searchableText) c.string.preencode(state, m.searchableText)
  },
  encode (state, m) {
    const flags =
      (m.channelId ? 1 : 0) |
      (m.senderName ? 2 : 0) |
      (m.status ? 4 : 0) |
      (m.edited ? 8 : 0) |
      (m.editedAt ? 16 : 0) |
      (m.replyToId ? 32 : 0) |
      (m.threadRootId ? 64 : 0) |
      (m.forwardedFromId ? 128 : 0) |
      (m.deleted ? 256 : 0) |
      (m.deletedBy ? 512 : 0) |
      (m.deletedAt ? 1024 : 0) |
      (m.searchableText ? 2048 : 0)

    c.string.encode(state, m.id)
    c.string.encode(state, m.roomId)
    c.uint.encode(state, flags)

    if (m.channelId) c.string.encode(state, m.channelId)
    c.string.encode(state, m.type)
    c.buffer.encode(state, m.sender)
    if (m.senderName) c.string.encode(state, m.senderName)
    c.string.encode(state, m.content)
    c.int.encode(state, m.timestamp)
    c.buffer.encode(state, m.signature)
    if (m.status) c.string.encode(state, m.status)
    if (m.editedAt) c.int.encode(state, m.editedAt)
    if (m.replyToId) c.string.encode(state, m.replyToId)
    if (m.threadRootId) c.string.encode(state, m.threadRootId)
    if (m.forwardedFromId) c.string.encode(state, m.forwardedFromId)
    if (m.deletedBy) c.buffer.encode(state, m.deletedBy)
    if (m.deletedAt) c.int.encode(state, m.deletedAt)
    if (m.searchableText) c.string.encode(state, m.searchableText)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      roomId: r1,
      channelId: (flags & 1) !== 0 ? c.string.decode(state) : null,
      type: c.string.decode(state),
      sender: c.buffer.decode(state),
      senderName: (flags & 2) !== 0 ? c.string.decode(state) : null,
      content: c.string.decode(state),
      timestamp: c.int.decode(state),
      signature: c.buffer.decode(state),
      status: (flags & 4) !== 0 ? c.string.decode(state) : null,
      edited: (flags & 8) !== 0,
      editedAt: (flags & 16) !== 0 ? c.int.decode(state) : 0,
      replyToId: (flags & 32) !== 0 ? c.string.decode(state) : null,
      threadRootId: (flags & 64) !== 0 ? c.string.decode(state) : null,
      forwardedFromId: (flags & 128) !== 0 ? c.string.decode(state) : null,
      deleted: (flags & 256) !== 0,
      deletedBy: (flags & 512) !== 0 ? c.buffer.decode(state) : null,
      deletedAt: (flags & 1024) !== 0 ? c.int.decode(state) : 0,
      searchableText: (flags & 2048) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @gigaroom/reaction
const encoding3 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    c.string.preencode(state, m.messageId)
    c.string.preencode(state, m.emoji)
    c.buffer.preencode(state, m.user)
    c.int.preencode(state, m.timestamp)
  },
  encode (state, m) {
    c.string.encode(state, m.id)
    c.string.encode(state, m.messageId)
    c.string.encode(state, m.emoji)
    c.buffer.encode(state, m.user)
    c.int.encode(state, m.timestamp)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const r3 = c.buffer.decode(state)
    const r4 = c.int.decode(state)

    return {
      id: r0,
      messageId: r1,
      emoji: r2,
      user: r3,
      timestamp: r4
    }
  }
}

// @gigaroom/room
const encoding4 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    c.string.preencode(state, m.type)
    c.string.preencode(state, m.name)
    state.end++ // max flag is 64 so always one byte

    if (m.description) c.string.preencode(state, m.description)
    if (m.avatar) c.string.preencode(state, m.avatar)
    c.int.preencode(state, m.createdAt)
    c.buffer.preencode(state, m.createdBy)
    c.buffer.preencode(state, m.discoveryKey)
    c.buffer.preencode(state, m.coreKey)
    if (m.encryptionInfo) c.string.preencode(state, m.encryptionInfo)
    if (m.settings) c.string.preencode(state, m.settings)
    if (m.metadata) c.string.preencode(state, m.metadata)
  },
  encode (state, m) {
    const flags =
      (m.description ? 1 : 0) |
      (m.avatar ? 2 : 0) |
      (m.isPrivate ? 4 : 0) |
      (m.isEncrypted ? 8 : 0) |
      (m.encryptionInfo ? 16 : 0) |
      (m.settings ? 32 : 0) |
      (m.metadata ? 64 : 0)

    c.string.encode(state, m.id)
    c.string.encode(state, m.type)
    c.string.encode(state, m.name)
    c.uint.encode(state, flags)

    if (m.description) c.string.encode(state, m.description)
    if (m.avatar) c.string.encode(state, m.avatar)
    c.int.encode(state, m.createdAt)
    c.buffer.encode(state, m.createdBy)
    c.buffer.encode(state, m.discoveryKey)
    c.buffer.encode(state, m.coreKey)
    if (m.encryptionInfo) c.string.encode(state, m.encryptionInfo)
    if (m.settings) c.string.encode(state, m.settings)
    if (m.metadata) c.string.encode(state, m.metadata)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      type: r1,
      name: r2,
      description: (flags & 1) !== 0 ? c.string.decode(state) : null,
      avatar: (flags & 2) !== 0 ? c.string.decode(state) : null,
      createdAt: c.int.decode(state),
      createdBy: c.buffer.decode(state),
      discoveryKey: c.buffer.decode(state),
      coreKey: c.buffer.decode(state),
      isPrivate: (flags & 4) !== 0,
      isEncrypted: (flags & 8) !== 0,
      encryptionInfo: (flags & 16) !== 0 ? c.string.decode(state) : null,
      settings: (flags & 32) !== 0 ? c.string.decode(state) : null,
      metadata: (flags & 64) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @gigaroom/member
const encoding5 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    c.string.preencode(state, m.roomId)
    c.buffer.preencode(state, m.userKey)
    state.end++ // max flag is 32 so always one byte

    if (m.displayName) c.string.preencode(state, m.displayName)
    c.int.preencode(state, m.joinedAt)
    if (m.invitedBy) c.buffer.preencode(state, m.invitedBy)
    if (m.lastActivity) c.int.preencode(state, m.lastActivity)
    if (m.status) c.string.preencode(state, m.status)
    if (m.lastReadId) c.string.preencode(state, m.lastReadId)
    if (m.roles) c.string.preencode(state, m.roles)
  },
  encode (state, m) {
    const flags =
      (m.displayName ? 1 : 0) |
      (m.invitedBy ? 2 : 0) |
      (m.lastActivity ? 4 : 0) |
      (m.status ? 8 : 0) |
      (m.lastReadId ? 16 : 0) |
      (m.roles ? 32 : 0)

    c.string.encode(state, m.id)
    c.string.encode(state, m.roomId)
    c.buffer.encode(state, m.userKey)
    c.uint.encode(state, flags)

    if (m.displayName) c.string.encode(state, m.displayName)
    c.int.encode(state, m.joinedAt)
    if (m.invitedBy) c.buffer.encode(state, m.invitedBy)
    if (m.lastActivity) c.int.encode(state, m.lastActivity)
    if (m.status) c.string.encode(state, m.status)
    if (m.lastReadId) c.string.encode(state, m.lastReadId)
    if (m.roles) c.string.encode(state, m.roles)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const r2 = c.buffer.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      roomId: r1,
      userKey: r2,
      displayName: (flags & 1) !== 0 ? c.string.decode(state) : null,
      joinedAt: c.int.decode(state),
      invitedBy: (flags & 2) !== 0 ? c.buffer.decode(state) : null,
      lastActivity: (flags & 4) !== 0 ? c.int.decode(state) : 0,
      status: (flags & 8) !== 0 ? c.string.decode(state) : null,
      lastReadId: (flags & 16) !== 0 ? c.string.decode(state) : null,
      roles: (flags & 32) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @gigaroom/role
const encoding6 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    c.string.preencode(state, m.roomId)
    c.string.preencode(state, m.name)
    state.end++ // max flag is 2 so always one byte

    if (m.color) c.string.preencode(state, m.color)
    c.int.preencode(state, m.position)
    c.string.preencode(state, m.permissions)
    c.int.preencode(state, m.createdAt)
    c.buffer.preencode(state, m.createdBy)
  },
  encode (state, m) {
    const flags =
      (m.color ? 1 : 0) |
      (m.isDefault ? 2 : 0)

    c.string.encode(state, m.id)
    c.string.encode(state, m.roomId)
    c.string.encode(state, m.name)
    c.uint.encode(state, flags)

    if (m.color) c.string.encode(state, m.color)
    c.int.encode(state, m.position)
    c.string.encode(state, m.permissions)
    c.int.encode(state, m.createdAt)
    c.buffer.encode(state, m.createdBy)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      roomId: r1,
      name: r2,
      color: (flags & 1) !== 0 ? c.string.decode(state) : null,
      position: c.int.decode(state),
      permissions: c.string.decode(state),
      createdAt: c.int.decode(state),
      createdBy: c.buffer.decode(state),
      isDefault: (flags & 2) !== 0
    }
  }
}

// @gigaroom/permissionOverride
const encoding7 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    c.string.preencode(state, m.roomId)
    c.string.preencode(state, m.targetType)
    c.string.preencode(state, m.targetId)
    state.end++ // max flag is 1 so always one byte

    if (m.channelId) c.string.preencode(state, m.channelId)
    c.string.preencode(state, m.allow)
    c.string.preencode(state, m.deny)
    c.int.preencode(state, m.setAt)
    c.buffer.preencode(state, m.setBy)
  },
  encode (state, m) {
    const flags = m.channelId ? 1 : 0

    c.string.encode(state, m.id)
    c.string.encode(state, m.roomId)
    c.string.encode(state, m.targetType)
    c.string.encode(state, m.targetId)
    c.uint.encode(state, flags)

    if (m.channelId) c.string.encode(state, m.channelId)
    c.string.encode(state, m.allow)
    c.string.encode(state, m.deny)
    c.int.encode(state, m.setAt)
    c.buffer.encode(state, m.setBy)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const r3 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      roomId: r1,
      targetType: r2,
      targetId: r3,
      channelId: (flags & 1) !== 0 ? c.string.decode(state) : null,
      allow: c.string.decode(state),
      deny: c.string.decode(state),
      setAt: c.int.decode(state),
      setBy: c.buffer.decode(state)
    }
  }
}

// @gigaroom/thread
const encoding8 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    c.string.preencode(state, m.roomId)
    state.end++ // max flag is 32 so always one byte

    if (m.channelId) c.string.preencode(state, m.channelId)
    if (m.name) c.string.preencode(state, m.name)
    c.int.preencode(state, m.createdAt)
    c.buffer.preencode(state, m.createdBy)
    if (m.lastActivity) c.int.preencode(state, m.lastActivity)
    if (m.messageCount) c.int.preencode(state, m.messageCount)
    if (m.settings) c.string.preencode(state, m.settings)
  },
  encode (state, m) {
    const flags =
      (m.channelId ? 1 : 0) |
      (m.name ? 2 : 0) |
      (m.lastActivity ? 4 : 0) |
      (m.messageCount ? 8 : 0) |
      (m.isArchived ? 16 : 0) |
      (m.settings ? 32 : 0)

    c.string.encode(state, m.id)
    c.string.encode(state, m.roomId)
    c.uint.encode(state, flags)

    if (m.channelId) c.string.encode(state, m.channelId)
    if (m.name) c.string.encode(state, m.name)
    c.int.encode(state, m.createdAt)
    c.buffer.encode(state, m.createdBy)
    if (m.lastActivity) c.int.encode(state, m.lastActivity)
    if (m.messageCount) c.int.encode(state, m.messageCount)
    if (m.settings) c.string.encode(state, m.settings)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      roomId: r1,
      channelId: (flags & 1) !== 0 ? c.string.decode(state) : null,
      name: (flags & 2) !== 0 ? c.string.decode(state) : null,
      createdAt: c.int.decode(state),
      createdBy: c.buffer.decode(state),
      lastActivity: (flags & 4) !== 0 ? c.int.decode(state) : 0,
      messageCount: (flags & 8) !== 0 ? c.int.decode(state) : 0,
      isArchived: (flags & 16) !== 0,
      settings: (flags & 32) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @gigaroom/channel
const encoding9 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    c.string.preencode(state, m.roomId)
    c.string.preencode(state, m.type)
    c.string.preencode(state, m.name)
    state.end++ // max flag is 8 so always one byte

    if (m.topic) c.string.preencode(state, m.topic)
    c.int.preencode(state, m.position)
    if (m.categoryId) c.string.preencode(state, m.categoryId)
    c.int.preencode(state, m.createdAt)
    c.string.preencode(state, m.createdBy)
    if (m.settings) c.string.preencode(state, m.settings)
  },
  encode (state, m) {
    const flags =
      (m.topic ? 1 : 0) |
      (m.categoryId ? 2 : 0) |
      (m.isDefault ? 4 : 0) |
      (m.settings ? 8 : 0)

    c.string.encode(state, m.id)
    c.string.encode(state, m.roomId)
    c.string.encode(state, m.type)
    c.string.encode(state, m.name)
    c.uint.encode(state, flags)

    if (m.topic) c.string.encode(state, m.topic)
    c.int.encode(state, m.position)
    if (m.categoryId) c.string.encode(state, m.categoryId)
    c.int.encode(state, m.createdAt)
    c.string.encode(state, m.createdBy)
    if (m.settings) c.string.encode(state, m.settings)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const r3 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      roomId: r1,
      type: r2,
      name: r3,
      topic: (flags & 1) !== 0 ? c.string.decode(state) : null,
      position: c.int.decode(state),
      categoryId: (flags & 2) !== 0 ? c.string.decode(state) : null,
      createdAt: c.int.decode(state),
      createdBy: c.string.decode(state),
      isDefault: (flags & 4) !== 0,
      settings: (flags & 8) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @gigaroom/category
const encoding10 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    c.string.preencode(state, m.roomId)
    c.string.preencode(state, m.name)
    c.int.preencode(state, m.position)
    c.int.preencode(state, m.createdAt)
    c.buffer.preencode(state, m.createdBy)
  },
  encode (state, m) {
    c.string.encode(state, m.id)
    c.string.encode(state, m.roomId)
    c.string.encode(state, m.name)
    c.int.encode(state, m.position)
    c.int.encode(state, m.createdAt)
    c.buffer.encode(state, m.createdBy)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const r3 = c.int.decode(state)
    const r4 = c.int.decode(state)
    const r5 = c.buffer.decode(state)

    return {
      id: r0,
      roomId: r1,
      name: r2,
      position: r3,
      createdAt: r4,
      createdBy: r5
    }
  }
}

// @gigaroom/file
const encoding11 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    c.string.preencode(state, m.roomId)
    c.string.preencode(state, m.messageId)
    c.string.preencode(state, m.name)
    c.int.preencode(state, m.size)
    c.string.preencode(state, m.type)
    c.string.preencode(state, m.hash)
    c.buffer.preencode(state, m.owner)
    c.int.preencode(state, m.uploadedAt)
    c.buffer.preencode(state, m.coreKey)
    c.string.preencode(state, m.blobInfo)
    state.end++ // max flag is 2 so always one byte

    if (m.metadata) c.string.preencode(state, m.metadata)
  },
  encode (state, m) {
    const flags =
      (m.isEncrypted ? 1 : 0) |
      (m.metadata ? 2 : 0)

    c.string.encode(state, m.id)
    c.string.encode(state, m.roomId)
    c.string.encode(state, m.messageId)
    c.string.encode(state, m.name)
    c.int.encode(state, m.size)
    c.string.encode(state, m.type)
    c.string.encode(state, m.hash)
    c.buffer.encode(state, m.owner)
    c.int.encode(state, m.uploadedAt)
    c.buffer.encode(state, m.coreKey)
    c.string.encode(state, m.blobInfo)
    c.uint.encode(state, flags)

    if (m.metadata) c.string.encode(state, m.metadata)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const r3 = c.string.decode(state)
    const r4 = c.int.decode(state)
    const r5 = c.string.decode(state)
    const r6 = c.string.decode(state)
    const r7 = c.buffer.decode(state)
    const r8 = c.int.decode(state)
    const r9 = c.buffer.decode(state)
    const r10 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      roomId: r1,
      messageId: r2,
      name: r3,
      size: r4,
      type: r5,
      hash: r6,
      owner: r7,
      uploadedAt: r8,
      coreKey: r9,
      blobInfo: r10,
      isEncrypted: (flags & 1) !== 0,
      metadata: (flags & 2) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @gigaroom/mention
const encoding12 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    c.string.preencode(state, m.messageId)
    state.end++ // max flag is 2 so always one byte

    if (m.userId) c.buffer.preencode(state, m.userId)
    if (m.roleId) c.string.preencode(state, m.roleId)
    c.string.preencode(state, m.roomId)
    c.int.preencode(state, m.timestamp)
  },
  encode (state, m) {
    const flags =
      (m.userId ? 1 : 0) |
      (m.roleId ? 2 : 0)

    c.string.encode(state, m.id)
    c.string.encode(state, m.messageId)
    c.uint.encode(state, flags)

    if (m.userId) c.buffer.encode(state, m.userId)
    if (m.roleId) c.string.encode(state, m.roleId)
    c.string.encode(state, m.roomId)
    c.int.encode(state, m.timestamp)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      messageId: r1,
      userId: (flags & 1) !== 0 ? c.buffer.decode(state) : null,
      roleId: (flags & 2) !== 0 ? c.string.decode(state) : null,
      roomId: c.string.decode(state),
      timestamp: c.int.decode(state)
    }
  }
}

function setVersion (v) {
  version = v
}

function encode (name, value, v = VERSION) {
  version = v
  return c.encode(getEncoding(name), value)
}

function decode (name, buffer, v = VERSION) {
  version = v
  return c.decode(getEncoding(name), buffer)
}

function getEnum (name) {
  switch (name) {
    default: throw new Error('Enum not found ' + name)
  }
}

function getEncoding (name) {
  switch (name) {
    case '@gigaroom/writer': return encoding0
    case '@gigaroom/invite': return encoding1
    case '@gigaroom/message': return encoding2
    case '@gigaroom/reaction': return encoding3
    case '@gigaroom/room': return encoding4
    case '@gigaroom/member': return encoding5
    case '@gigaroom/role': return encoding6
    case '@gigaroom/permissionOverride': return encoding7
    case '@gigaroom/thread': return encoding8
    case '@gigaroom/channel': return encoding9
    case '@gigaroom/category': return encoding10
    case '@gigaroom/file': return encoding11
    case '@gigaroom/mention': return encoding12
    default: throw new Error('Encoder not found ' + name)
  }
}

function getStruct (name, v = VERSION) {
  const enc = getEncoding(name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

const resolveStruct = getStruct // compat

module.exports = { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }
