// This file is autogenerated by the hyperdispatch compiler
/* eslint-disable camelcase */

const { c, b4a, assert } = require('hyperdispatch/runtime')
const { version, getEncoding, setVersion } = require('./messages.js')

const defaultVersion = version

class Router {
  constructor () {
    this._handler0 = null
    this._handler1 = null
    this._handler2 = null
    this._handler3 = null
    this._handler4 = null
    this._handler5 = null
    this._handler6 = null
    this._handler7 = null
    this._handler8 = null
    this._handler9 = null
    this._handler10 = null
    this._handler11 = null
    this._handler12 = null
    this._handler13 = null
    this._handler14 = null
    this._handler15 = null
    this._handler16 = null
    this._handler17 = null
    this._handler18 = null
    this._handler19 = null
    this._handler20 = null
    this._handler21 = null
    this._handler22 = null
    this._handler23 = null
    this._handler24 = null
    this._handler25 = null
    this._handler26 = null

    this._missing = 27
  }

  add (name, handler) {
    switch (name) {
      case '@gigaroom/remove-writer':
        this._handler0 = handler
        break
      case '@gigaroom/add-writer':
        this._handler1 = handler
        break
      case '@gigaroom/add-invite':
        this._handler2 = handler
        break
      case '@gigaroom/create-room':
        this._handler3 = handler
        break
      case '@gigaroom/update-room':
        this._handler4 = handler
        break
      case '@gigaroom/add-member':
        this._handler5 = handler
        break
      case '@gigaroom/update-member':
        this._handler6 = handler
        break
      case '@gigaroom/remove-member':
        this._handler7 = handler
        break
      case '@gigaroom/create-role':
        this._handler8 = handler
        break
      case '@gigaroom/update-role':
        this._handler9 = handler
        break
      case '@gigaroom/delete-role':
        this._handler10 = handler
        break
      case '@gigaroom/set-permission-override':
        this._handler11 = handler
        break
      case '@gigaroom/create-channel':
        this._handler12 = handler
        break
      case '@gigaroom/update-channel':
        this._handler13 = handler
        break
      case '@gigaroom/delete-channel':
        this._handler14 = handler
        break
      case '@gigaroom/create-category':
        this._handler15 = handler
        break
      case '@gigaroom/update-category':
        this._handler16 = handler
        break
      case '@gigaroom/delete-category':
        this._handler17 = handler
        break
      case '@gigaroom/create-thread':
        this._handler18 = handler
        break
      case '@gigaroom/update-thread':
        this._handler19 = handler
        break
      case '@gigaroom/add-message':
        this._handler20 = handler
        break
      case '@gigaroom/edit-message':
        this._handler21 = handler
        break
      case '@gigaroom/delete-message':
        this._handler22 = handler
        break
      case '@gigaroom/add-reaction':
        this._handler23 = handler
        break
      case '@gigaroom/remove-reaction':
        this._handler24 = handler
        break
      case '@gigaroom/add-file':
        this._handler25 = handler
        break
      case '@gigaroom/add-mention':
        this._handler26 = handler
        break
      default:
        throw new Error('Cannot register a handler for a nonexistent route: ' + name)
    }
    this._missing--
  }

  _checkAll () {
    assert(this._handler0 !== null, 'Missing handler for "@gigaroom/remove-writer"')
    assert(this._handler1 !== null, 'Missing handler for "@gigaroom/add-writer"')
    assert(this._handler2 !== null, 'Missing handler for "@gigaroom/add-invite"')
    assert(this._handler3 !== null, 'Missing handler for "@gigaroom/create-room"')
    assert(this._handler4 !== null, 'Missing handler for "@gigaroom/update-room"')
    assert(this._handler5 !== null, 'Missing handler for "@gigaroom/add-member"')
    assert(this._handler6 !== null, 'Missing handler for "@gigaroom/update-member"')
    assert(this._handler7 !== null, 'Missing handler for "@gigaroom/remove-member"')
    assert(this._handler8 !== null, 'Missing handler for "@gigaroom/create-role"')
    assert(this._handler9 !== null, 'Missing handler for "@gigaroom/update-role"')
    assert(this._handler10 !== null, 'Missing handler for "@gigaroom/delete-role"')
    assert(this._handler11 !== null, 'Missing handler for "@gigaroom/set-permission-override"')
    assert(this._handler12 !== null, 'Missing handler for "@gigaroom/create-channel"')
    assert(this._handler13 !== null, 'Missing handler for "@gigaroom/update-channel"')
    assert(this._handler14 !== null, 'Missing handler for "@gigaroom/delete-channel"')
    assert(this._handler15 !== null, 'Missing handler for "@gigaroom/create-category"')
    assert(this._handler16 !== null, 'Missing handler for "@gigaroom/update-category"')
    assert(this._handler17 !== null, 'Missing handler for "@gigaroom/delete-category"')
    assert(this._handler18 !== null, 'Missing handler for "@gigaroom/create-thread"')
    assert(this._handler19 !== null, 'Missing handler for "@gigaroom/update-thread"')
    assert(this._handler20 !== null, 'Missing handler for "@gigaroom/add-message"')
    assert(this._handler21 !== null, 'Missing handler for "@gigaroom/edit-message"')
    assert(this._handler22 !== null, 'Missing handler for "@gigaroom/delete-message"')
    assert(this._handler23 !== null, 'Missing handler for "@gigaroom/add-reaction"')
    assert(this._handler24 !== null, 'Missing handler for "@gigaroom/remove-reaction"')
    assert(this._handler25 !== null, 'Missing handler for "@gigaroom/add-file"')
    assert(this._handler26 !== null, 'Missing handler for "@gigaroom/add-mention"')
  }

  async dispatch (encoded, context) {
    if (this._missing > 0) {
      this._checkAll()
    }

    const state = { buffer: encoded, start: 0, end: encoded.byteLength }
    const id = c.uint.decode(state)

    setVersion(defaultVersion)

    switch (id) {
      case 0:
        return this._handler0(route0.enc.decode(state), context)
      case 1:
        return this._handler1(route1.enc.decode(state), context)
      case 2:
        return this._handler2(route2.enc.decode(state), context)
      case 3:
        return this._handler3(route3.enc.decode(state), context)
      case 4:
        return this._handler4(route4.enc.decode(state), context)
      case 5:
        return this._handler5(route5.enc.decode(state), context)
      case 6:
        return this._handler6(route6.enc.decode(state), context)
      case 7:
        return this._handler7(route7.enc.decode(state), context)
      case 8:
        return this._handler8(route8.enc.decode(state), context)
      case 9:
        return this._handler9(route9.enc.decode(state), context)
      case 10:
        return this._handler10(route10.enc.decode(state), context)
      case 11:
        return this._handler11(route11.enc.decode(state), context)
      case 12:
        return this._handler12(route12.enc.decode(state), context)
      case 13:
        return this._handler13(route13.enc.decode(state), context)
      case 14:
        return this._handler14(route14.enc.decode(state), context)
      case 15:
        return this._handler15(route15.enc.decode(state), context)
      case 16:
        return this._handler16(route16.enc.decode(state), context)
      case 17:
        return this._handler17(route17.enc.decode(state), context)
      case 18:
        return this._handler18(route18.enc.decode(state), context)
      case 19:
        return this._handler19(route19.enc.decode(state), context)
      case 20:
        return this._handler20(route20.enc.decode(state), context)
      case 21:
        return this._handler21(route21.enc.decode(state), context)
      case 22:
        return this._handler22(route22.enc.decode(state), context)
      case 23:
        return this._handler23(route23.enc.decode(state), context)
      case 24:
        return this._handler24(route24.enc.decode(state), context)
      case 25:
        return this._handler25(route25.enc.decode(state), context)
      case 26:
        return this._handler26(route26.enc.decode(state), context)
      default:
        throw new Error('Handler not found for ID:' + id)
    }
  }
}

function dispatch (name, message, { version = defaultVersion } = {}) {
  const state = { buffer: null, start: 0, end: 0 }

  const o = getEncoderAndId(name)
  setVersion(version)

  c.uint.preencode(state, o.id)
  o.enc.preencode(state, message)

  state.buffer = b4a.allocUnsafe(state.end)
  c.uint.encode(state, o.id)
  o.enc.encode(state, message)

  return state.buffer
}

const route0 = {
  id: 0,
  enc: getEncoding('@gigaroom/writer')
}

const route1 = {
  id: 1,
  enc: getEncoding('@gigaroom/writer')
}

const route2 = {
  id: 2,
  enc: getEncoding('@gigaroom/invite')
}

const route3 = {
  id: 3,
  enc: getEncoding('@gigaroom/room')
}

const route4 = {
  id: 4,
  enc: getEncoding('@gigaroom/room')
}

const route5 = {
  id: 5,
  enc: getEncoding('@gigaroom/member')
}

const route6 = {
  id: 6,
  enc: getEncoding('@gigaroom/member')
}

const route7 = {
  id: 7,
  enc: getEncoding('@gigaroom/member')
}

const route8 = {
  id: 8,
  enc: getEncoding('@gigaroom/role')
}

const route9 = {
  id: 9,
  enc: getEncoding('@gigaroom/role')
}

const route10 = {
  id: 10,
  enc: getEncoding('@gigaroom/role')
}

const route11 = {
  id: 11,
  enc: getEncoding('@gigaroom/permissionOverride')
}

const route12 = {
  id: 12,
  enc: getEncoding('@gigaroom/channel')
}

const route13 = {
  id: 13,
  enc: getEncoding('@gigaroom/channel')
}

const route14 = {
  id: 14,
  enc: getEncoding('@gigaroom/channel')
}

const route15 = {
  id: 15,
  enc: getEncoding('@gigaroom/category')
}

const route16 = {
  id: 16,
  enc: getEncoding('@gigaroom/category')
}

const route17 = {
  id: 17,
  enc: getEncoding('@gigaroom/category')
}

const route18 = {
  id: 18,
  enc: getEncoding('@gigaroom/thread')
}

const route19 = {
  id: 19,
  enc: getEncoding('@gigaroom/thread')
}

const route20 = {
  id: 20,
  enc: getEncoding('@gigaroom/message')
}

const route21 = {
  id: 21,
  enc: getEncoding('@gigaroom/message')
}

const route22 = {
  id: 22,
  enc: getEncoding('@gigaroom/message')
}

const route23 = {
  id: 23,
  enc: getEncoding('@gigaroom/reaction')
}

const route24 = {
  id: 24,
  enc: getEncoding('@gigaroom/reaction')
}

const route25 = {
  id: 25,
  enc: getEncoding('@gigaroom/file')
}

const route26 = {
  id: 26,
  enc: getEncoding('@gigaroom/mention')
}

function getEncoderAndId (name) {
  switch (name) {
    case '@gigaroom/remove-writer':
      return route0
    case '@gigaroom/add-writer':
      return route1
    case '@gigaroom/add-invite':
      return route2
    case '@gigaroom/create-room':
      return route3
    case '@gigaroom/update-room':
      return route4
    case '@gigaroom/add-member':
      return route5
    case '@gigaroom/update-member':
      return route6
    case '@gigaroom/remove-member':
      return route7
    case '@gigaroom/create-role':
      return route8
    case '@gigaroom/update-role':
      return route9
    case '@gigaroom/delete-role':
      return route10
    case '@gigaroom/set-permission-override':
      return route11
    case '@gigaroom/create-channel':
      return route12
    case '@gigaroom/update-channel':
      return route13
    case '@gigaroom/delete-channel':
      return route14
    case '@gigaroom/create-category':
      return route15
    case '@gigaroom/update-category':
      return route16
    case '@gigaroom/delete-category':
      return route17
    case '@gigaroom/create-thread':
      return route18
    case '@gigaroom/update-thread':
      return route19
    case '@gigaroom/add-message':
      return route20
    case '@gigaroom/edit-message':
      return route21
    case '@gigaroom/delete-message':
      return route22
    case '@gigaroom/add-reaction':
      return route23
    case '@gigaroom/remove-reaction':
      return route24
    case '@gigaroom/add-file':
      return route25
    case '@gigaroom/add-mention':
      return route26
    default:
      throw new Error('Handler not found for name: ' + name)
  }
}

module.exports = {
  version,
  dispatch,
  Router
}
